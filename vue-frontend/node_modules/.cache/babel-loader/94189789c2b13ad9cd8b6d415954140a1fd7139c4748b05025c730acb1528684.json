{"ast":null,"code":"import { ref, nextTick, computed, onMounted } from 'vue';\nimport { ElMessage } from 'element-plus';\nimport api from '../utils/api';\nexport default {\n  name: 'AIChat',\n  setup() {\n    const sessions = ref({});\n    const currentSessionId = ref(null);\n    const tempSession = ref(false);\n    const currentMessages = ref([]);\n    const inputMessage = ref('');\n    const loading = ref(false);\n    const messagesRef = ref();\n    const messageInput = ref();\n    const selectedModel = ref('1');\n\n    // Markdown渲染函数（简化版）\n    const renderMarkdown = text => {\n      return text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>').replace(/\\*(.*?)\\*/g, '<em>$1</em>').replace(/`(.*?)`/g, '<code>$1</code>').replace(/\\n/g, '<br>');\n    };\n    const playTTS = async text => {\n      try {\n        const response = await api.post('/chat/tts', {\n          text\n        });\n        if (response.data.status_code === 1000 && response.data.url) {\n          const audio = new Audio(response.data.url);\n          audio.play();\n        } else {\n          ElMessage.error('无法获取语音');\n        }\n      } catch (error) {\n        console.error('TTS error:', error);\n        ElMessage.error('请求语音接口失败');\n      }\n    };\n    const loadSessions = async () => {\n      try {\n        const response = await api.get('/chat/sessions');\n        if (response.data.status_code === 1000 && Array.isArray(response.data.sessions)) {\n          const sessionMap = {};\n          response.data.sessions.forEach(s => {\n            const sid = String(s.sessionId);\n            sessionMap[sid] = {\n              id: sid,\n              name: s.name || `会话 ${sid}`,\n              messages: []\n            };\n          });\n          sessions.value = sessionMap;\n        }\n      } catch (error) {\n        console.error('Load sessions error:', error);\n      }\n    };\n    const createNewSession = () => {\n      currentSessionId.value = 'temp';\n      tempSession.value = true;\n      currentMessages.value = [];\n    };\n    const switchSession = async sessionId => {\n      currentSessionId.value = String(sessionId);\n      tempSession.value = false;\n      if (!sessions.value[sessionId].messages || sessions.value[sessionId].messages.length === 0) {\n        try {\n          const response = await api.post('/chat/history', {\n            sessionId: currentSessionId.value\n          });\n          if (response.data.status_code === 1000 && Array.isArray(response.data.history)) {\n            const messages = [];\n            response.data.history.forEach(item => {\n              messages.push({\n                role: item.is_user ? 'user' : 'assistant',\n                content: item.content\n              });\n            });\n            sessions.value[sessionId].messages = messages;\n          }\n        } catch (error) {\n          console.error('Load history error:', error);\n        }\n      }\n      currentMessages.value = sessions.value[sessionId].messages || [];\n      await nextTick();\n      scrollToBottom();\n    };\n    const syncHistory = async () => {\n      if (!currentSessionId.value || tempSession.value) {\n        ElMessage.warning('请选择已有会话进行同步');\n        return;\n      }\n      try {\n        const response = await api.post('/chat/history', {\n          sessionId: currentSessionId.value\n        });\n        if (response.data.status_code === 1000 && Array.isArray(response.data.history)) {\n          const messages = [];\n          response.data.history.forEach(item => {\n            messages.push({\n              role: item.is_user ? 'user' : 'assistant',\n              content: item.content\n            });\n          });\n          sessions.value[currentSessionId.value].messages = messages;\n          currentMessages.value = messages;\n          await nextTick();\n          scrollToBottom();\n        } else {\n          ElMessage.error('无法获取历史数据');\n        }\n      } catch (error) {\n        console.error('Sync history error:', error);\n        ElMessage.error('请求历史数据失败');\n      }\n    };\n    const sendMessage = async () => {\n      if (!inputMessage.value.trim()) {\n        ElMessage.warning('请输入消息内容');\n        return;\n      }\n      const userMessage = {\n        role: 'user',\n        content: inputMessage.value\n      };\n      currentMessages.value.push(userMessage);\n      const currentInput = inputMessage.value;\n      inputMessage.value = '';\n      await nextTick();\n      scrollToBottom();\n      try {\n        loading.value = true;\n        if (tempSession.value) {\n          // 新会话\n          const response = await api.post('/chat/send-new-session', {\n            question: currentInput,\n            modelType: selectedModel.value\n          });\n          if (response.data.status_code === 1000) {\n            const sessionId = String(response.data.sessionId);\n            const aiMessage = {\n              role: 'assistant',\n              content: response.data.Information\n            };\n            sessions.value[sessionId] = {\n              id: sessionId,\n              name: '新会话',\n              messages: [userMessage, aiMessage]\n            };\n            currentSessionId.value = sessionId;\n            tempSession.value = false;\n            currentMessages.value = [userMessage, aiMessage];\n          } else {\n            ElMessage.error(response.data.status_msg || '发送失败');\n            currentMessages.value.pop(); // 移除用户消息\n          }\n        } else {\n          // 继续会话\n          sessions.value[currentSessionId.value].messages.push(userMessage);\n          const response = await api.post('/chat/send', {\n            question: currentInput,\n            modelType: selectedModel.value,\n            sessionId: currentSessionId.value\n          });\n          if (response.data.status_code === 1000) {\n            const aiMessage = {\n              role: 'assistant',\n              content: response.data.Information\n            };\n            currentMessages.value.push(aiMessage);\n            sessions.value[currentSessionId.value].messages.push(aiMessage);\n          } else {\n            ElMessage.error(response.data.status_msg || '发送失败');\n            sessions.value[currentSessionId.value].messages.pop(); // 移除用户消息\n            currentMessages.value.pop();\n          }\n        }\n      } catch (error) {\n        console.error('Send message error:', error);\n        ElMessage.error('发送失败，请重试');\n        if (!tempSession.value) {\n          sessions.value[currentSessionId.value].messages.pop();\n        }\n        currentMessages.value.pop();\n      } finally {\n        loading.value = false;\n        await nextTick();\n        scrollToBottom();\n      }\n    };\n    const scrollToBottom = () => {\n      if (messagesRef.value) {\n        messagesRef.value.scrollTop = messagesRef.value.scrollHeight;\n      }\n    };\n    onMounted(() => {\n      loadSessions();\n    });\n    return {\n      sessions: computed(() => Object.values(sessions.value)),\n      currentSessionId,\n      tempSession,\n      currentMessages,\n      inputMessage,\n      loading,\n      messagesRef,\n      messageInput,\n      selectedModel,\n      renderMarkdown,\n      playTTS,\n      createNewSession,\n      switchSession,\n      syncHistory,\n      sendMessage\n    };\n  }\n};","map":{"version":3,"names":["ref","nextTick","computed","onMounted","ElMessage","api","name","setup","sessions","currentSessionId","tempSession","currentMessages","inputMessage","loading","messagesRef","messageInput","selectedModel","renderMarkdown","text","replace","playTTS","response","post","data","status_code","url","audio","Audio","play","error","console","loadSessions","get","Array","isArray","sessionMap","forEach","s","sid","String","sessionId","id","messages","value","createNewSession","switchSession","length","history","item","push","role","is_user","content","scrollToBottom","syncHistory","warning","sendMessage","trim","userMessage","currentInput","question","modelType","aiMessage","Information","status_msg","pop","scrollTop","scrollHeight","Object","values"],"sources":["/root/GopherAI/GopherAI-/vue-frontend/src/views/AIChat.vue"],"sourcesContent":["<template>\n  <div class=\"ai-chat-container\">\n    <!-- 左侧会话列表 -->\n    <div class=\"session-list\">\n      <div class=\"session-list-header\">\n        <span>会话列表</span>\n        <button class=\"new-chat-btn\" @click=\"createNewSession\">＋ 新聊天</button>\n      </div>\n      <ul class=\"session-list-ul\">\n        <li\n          v-for=\"session in sessions\"\n          :key=\"session.id\"\n          :class=\"['session-item', { active: currentSessionId === session.id }]\"\n          @click=\"switchSession(session.id)\"\n        >\n          {{ session.name || `会话 ${session.id}` }}\n        </li>\n      </ul>\n    </div>\n\n    <!-- 右侧聊天区域 -->\n    <div class=\"chat-section\">\n      <div class=\"top-bar\">\n        <button class=\"back-btn\" @click=\"$router.push('/menu')\">← 返回</button>\n        <button class=\"sync-btn\" @click=\"syncHistory\" :disabled=\"!currentSessionId || tempSession\">同步历史数据</button>\n        <label for=\"modelType\">选择模型：</label>\n        <select id=\"modelType\" v-model=\"selectedModel\" class=\"model-select\">\n          <option value=\"1\">阿里百炼</option>\n          <option value=\"2\">豆包</option>\n          <option value=\"3\">百炼RAG</option>\n          <option value=\"4\">阿里百炼MCP</option>\n        </select>\n      </div>\n\n      <div class=\"chat-messages\" ref=\"messagesRef\">\n        <div\n          v-for=\"(message, index) in currentMessages\"\n          :key=\"index\"\n          :class=\"['message', message.role === 'user' ? 'user-message' : 'ai-message']\"\n        >\n          <div class=\"message-header\">\n            <b>{{ message.role === 'user' ? '你' : 'AI' }}:</b>\n            <button v-if=\"message.role === 'assistant'\" class=\"tts-btn\" @click=\"playTTS(message.content)\">🔊</button>\n          </div>\n          <div class=\"message-content\" v-html=\"renderMarkdown(message.content)\"></div>\n        </div>\n      </div>\n\n      <div class=\"chat-input\">\n        <textarea\n          v-model=\"inputMessage\"\n          placeholder=\"请输入你的问题...\"\n          @keydown.enter.exact.prevent=\"sendMessage\"\n          :disabled=\"loading\"\n          ref=\"messageInput\"\n          rows=\"1\"\n        ></textarea>\n        <button\n          type=\"button\"\n          :disabled=\"!inputMessage.trim() || loading\"\n          @click=\"sendMessage\"\n          class=\"send-btn\"\n        >\n          {{ loading ? '发送中...' : '发送' }}\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, nextTick, computed, onMounted } from 'vue'\nimport { ElMessage } from 'element-plus'\nimport api from '../utils/api'\n\nexport default {\n  name: 'AIChat',\n  setup() {\n    const sessions = ref({})\n    const currentSessionId = ref(null)\n    const tempSession = ref(false)\n    const currentMessages = ref([])\n    const inputMessage = ref('')\n    const loading = ref(false)\n    const messagesRef = ref()\n    const messageInput = ref()\n    const selectedModel = ref('1')\n\n    // Markdown渲染函数（简化版）\n    const renderMarkdown = (text) => {\n      return text\n        .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n        .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n        .replace(/`(.*?)`/g, '<code>$1</code>')\n        .replace(/\\n/g, '<br>')\n    }\n\n    const playTTS = async (text) => {\n      try {\n        const response = await api.post('/chat/tts', { text })\n        if (response.data.status_code === 1000 && response.data.url) {\n          const audio = new Audio(response.data.url)\n          audio.play()\n        } else {\n          ElMessage.error('无法获取语音')\n        }\n      } catch (error) {\n        console.error('TTS error:', error)\n        ElMessage.error('请求语音接口失败')\n      }\n    }\n\n    const loadSessions = async () => {\n      try {\n        const response = await api.get('/chat/sessions')\n        if (response.data.status_code === 1000 && Array.isArray(response.data.sessions)) {\n          const sessionMap = {}\n          response.data.sessions.forEach(s => {\n            const sid = String(s.sessionId)\n            sessionMap[sid] = {\n              id: sid,\n              name: s.name || `会话 ${sid}`,\n              messages: []\n            }\n          })\n          sessions.value = sessionMap\n        }\n      } catch (error) {\n        console.error('Load sessions error:', error)\n      }\n    }\n\n    const createNewSession = () => {\n      currentSessionId.value = 'temp'\n      tempSession.value = true\n      currentMessages.value = []\n    }\n\n    const switchSession = async (sessionId) => {\n      currentSessionId.value = String(sessionId)\n      tempSession.value = false\n\n      if (!sessions.value[sessionId].messages || sessions.value[sessionId].messages.length === 0) {\n        try {\n          const response = await api.post('/chat/history', { sessionId: currentSessionId.value })\n          if (response.data.status_code === 1000 && Array.isArray(response.data.history)) {\n            const messages = []\n            response.data.history.forEach(item => {\n              messages.push({\n                role: item.is_user ? 'user' : 'assistant',\n                content: item.content\n              })\n            })\n            sessions.value[sessionId].messages = messages\n          }\n        } catch (error) {\n          console.error('Load history error:', error)\n        }\n      }\n\n      currentMessages.value = sessions.value[sessionId].messages || []\n      await nextTick()\n      scrollToBottom()\n    }\n\n    const syncHistory = async () => {\n      if (!currentSessionId.value || tempSession.value) {\n        ElMessage.warning('请选择已有会话进行同步')\n        return\n      }\n\n      try {\n        const response = await api.post('/chat/history', { sessionId: currentSessionId.value })\n        if (response.data.status_code === 1000 && Array.isArray(response.data.history)) {\n          const messages = []\n          response.data.history.forEach(item => {\n            messages.push({\n              role: item.is_user ? 'user' : 'assistant',\n              content: item.content\n            })\n          })\n          sessions.value[currentSessionId.value].messages = messages\n          currentMessages.value = messages\n          await nextTick()\n          scrollToBottom()\n        } else {\n          ElMessage.error('无法获取历史数据')\n        }\n      } catch (error) {\n        console.error('Sync history error:', error)\n        ElMessage.error('请求历史数据失败')\n      }\n    }\n\n    const sendMessage = async () => {\n      if (!inputMessage.value.trim()) {\n        ElMessage.warning('请输入消息内容')\n        return\n      }\n\n      const userMessage = {\n        role: 'user',\n        content: inputMessage.value\n      }\n      currentMessages.value.push(userMessage)\n      const currentInput = inputMessage.value\n      inputMessage.value = ''\n\n      await nextTick()\n      scrollToBottom()\n\n      try {\n        loading.value = true\n\n        if (tempSession.value) {\n          // 新会话\n          const response = await api.post('/chat/send-new-session', {\n            question: currentInput,\n            modelType: selectedModel.value\n          })\n\n          if (response.data.status_code === 1000) {\n            const sessionId = String(response.data.sessionId)\n            const aiMessage = {\n              role: 'assistant',\n              content: response.data.Information\n            }\n\n            sessions.value[sessionId] = {\n              id: sessionId,\n              name: '新会话',\n              messages: [userMessage, aiMessage]\n            }\n\n            currentSessionId.value = sessionId\n            tempSession.value = false\n            currentMessages.value = [userMessage, aiMessage]\n          } else {\n            ElMessage.error(response.data.status_msg || '发送失败')\n            currentMessages.value.pop() // 移除用户消息\n          }\n        } else {\n          // 继续会话\n          sessions.value[currentSessionId.value].messages.push(userMessage)\n\n          const response = await api.post('/chat/send', {\n            question: currentInput,\n            modelType: selectedModel.value,\n            sessionId: currentSessionId.value\n          })\n\n          if (response.data.status_code === 1000) {\n            const aiMessage = {\n              role: 'assistant',\n              content: response.data.Information\n            }\n            currentMessages.value.push(aiMessage)\n            sessions.value[currentSessionId.value].messages.push(aiMessage)\n          } else {\n            ElMessage.error(response.data.status_msg || '发送失败')\n            sessions.value[currentSessionId.value].messages.pop() // 移除用户消息\n            currentMessages.value.pop()\n          }\n        }\n      } catch (error) {\n        console.error('Send message error:', error)\n        ElMessage.error('发送失败，请重试')\n        if (!tempSession.value) {\n          sessions.value[currentSessionId.value].messages.pop()\n        }\n        currentMessages.value.pop()\n      } finally {\n        loading.value = false\n        await nextTick()\n        scrollToBottom()\n      }\n    }\n\n    const scrollToBottom = () => {\n      if (messagesRef.value) {\n        messagesRef.value.scrollTop = messagesRef.value.scrollHeight\n      }\n    }\n\n    onMounted(() => {\n      loadSessions()\n    })\n\n    return {\n      sessions: computed(() => Object.values(sessions.value)),\n      currentSessionId,\n      tempSession,\n      currentMessages,\n      inputMessage,\n      loading,\n      messagesRef,\n      messageInput,\n      selectedModel,\n      renderMarkdown,\n      playTTS,\n      createNewSession,\n      switchSession,\n      syncHistory,\n      sendMessage\n    }\n  }\n}\n</script>\n\n<style scoped>\n.ai-chat-container {\n  min-height: 100vh;\n  display: flex;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  position: relative;\n  overflow: hidden;\n}\n\n.ai-chat-container::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><circle cx=\"20\" cy=\"20\" r=\"2\" fill=\"rgba(255,255,255,0.1)\"/><circle cx=\"80\" cy=\"80\" r=\"2\" fill=\"rgba(255,255,255,0.1)\"/><circle cx=\"40\" cy=\"60\" r=\"1\" fill=\"rgba(255,255,255,0.1)\"/><circle cx=\"60\" cy=\"30\" r=\"1.5\" fill=\"rgba(255,255,255,0.1)\"/></svg>');\n  animation: float 20s ease-in-out infinite;\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px) rotate(0deg); }\n  50% { transform: translateY(-20px) rotate(180deg); }\n}\n\n.session-list {\n  width: 280px;\n  display: flex;\n  flex-direction: column;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(15px);\n  border-right: 1px solid rgba(0, 0, 0, 0.1);\n  box-shadow: 2px 0 20px rgba(0, 0, 0, 0.1);\n  position: relative;\n  z-index: 2;\n}\n\n.session-list-header {\n  padding: 20px;\n  text-align: center;\n  font-weight: 600;\n  background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(103, 194, 58, 0.1) 100%);\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.new-chat-btn {\n  width: 100%;\n  padding: 12px 0;\n  cursor: pointer;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  border: none;\n  border-radius: 12px;\n  font-size: 14px;\n  font-weight: 600;\n  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: hidden;\n}\n\n.new-chat-btn::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);\n  transition: left 0.5s;\n}\n\n.new-chat-btn:hover::before {\n  left: 100%;\n}\n\n.new-chat-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);\n}\n\n.session-list-ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  flex: 1;\n  overflow-y: auto;\n}\n\n.session-item {\n  padding: 15px 20px;\n  cursor: pointer;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  transition: all 0.3s ease;\n  position: relative;\n}\n\n.session-item.active {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  font-weight: 600;\n  box-shadow: inset 0 0 20px rgba(102, 126, 234, 0.3);\n}\n\n.session-item:hover {\n  background: rgba(102, 126, 234, 0.1);\n  transform: translateX(5px);\n}\n\n.chat-section {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  z-index: 1;\n}\n\n.top-bar {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  color: #2c3e50;\n  display: flex;\n  align-items: center;\n  padding: 0 30px;\n  box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  position: relative;\n  z-index: 2;\n}\n\n.back-btn {\n  background: rgba(255, 255, 255, 0.2);\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  color: #2c3e50;\n  padding: 10px 20px;\n  border-radius: 12px;\n  cursor: pointer;\n  font-weight: 600;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.back-btn:hover {\n  background: rgba(255, 255, 255, 0.3);\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);\n}\n\n.sync-btn {\n  background: linear-gradient(135deg, #67c23a 0%, #409eff 100%);\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 12px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 600;\n  box-shadow: 0 4px 15px rgba(103, 194, 58, 0.3);\n  transition: all 0.3s ease;\n  margin-left: 15px;\n}\n\n.sync-btn:hover:not(:disabled) {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(103, 194, 58, 0.4);\n}\n\n.sync-btn:disabled {\n  background: #ccc;\n  box-shadow: none;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.model-select {\n  margin-left: 20px;\n  padding: 8px 12px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  border-radius: 8px;\n  background: white;\n  color: #2c3e50;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.model-select:hover {\n  border-color: #409eff;\n  box-shadow: 0 0 10px rgba(64, 158, 255, 0.2);\n}\n\n.chat-messages {\n  flex: 1;\n  overflow-y: auto;\n  padding: 30px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  position: relative;\n  z-index: 1;\n}\n\n.chat-messages::-webkit-scrollbar {\n  width: 6px;\n}\n\n.chat-messages::-webkit-scrollbar-track {\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 3px;\n}\n\n.chat-messages::-webkit-scrollbar-thumb {\n  background: rgba(102, 126, 234, 0.3);\n  border-radius: 3px;\n}\n\n.chat-messages::-webkit-scrollbar-thumb:hover {\n  background: rgba(102, 126, 234, 0.5);\n}\n\n.message {\n  max-width: 70%;\n  padding: 16px 20px;\n  border-radius: 20px;\n  line-height: 1.6;\n  word-wrap: break-word;\n  position: relative;\n  animation: messageSlideIn 0.4s ease-out;\n  font-size: 15px;\n}\n\n@keyframes messageSlideIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px) scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n  }\n}\n\n.user-message {\n  align-self: flex-end;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  box-shadow: 0 4px 20px rgba(102, 126, 234, 0.3);\n  position: relative;\n}\n\n.user-message::after {\n  content: '';\n  position: absolute;\n  bottom: -2px;\n  right: 20px;\n  width: 0;\n  height: 0;\n  border-left: 8px solid transparent;\n  border-right: 8px solid transparent;\n  border-top: 8px solid #764ba2;\n}\n\n.ai-message {\n  align-self: flex-start;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  color: #2c3e50;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  position: relative;\n}\n\n.ai-message::after {\n  content: '';\n  position: absolute;\n  bottom: -2px;\n  left: 20px;\n  width: 0;\n  height: 0;\n  border-left: 8px solid transparent;\n  border-right: 8px solid transparent;\n  border-top: 8px solid rgba(255, 255, 255, 0.95);\n}\n\n.message-header {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 8px;\n}\n\n.message-header b {\n  font-weight: 600;\n}\n\n.tts-btn {\n  padding: 6px 10px;\n  border-radius: 8px;\n  font-size: 12px;\n  cursor: pointer;\n  background: linear-gradient(135deg, #67c23a 0%, #409eff 100%);\n  color: white;\n  border: none;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 8px rgba(103, 194, 58, 0.3);\n}\n\n.tts-btn:hover {\n  transform: scale(1.1);\n  box-shadow: 0 4px 15px rgba(103, 194, 58, 0.4);\n}\n\n.message-content {\n  flex: 1;\n}\n\n.chat-input {\n  padding: 30px;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n  position: relative;\n  z-index: 1;\n}\n\n.chat-input textarea {\n  width: 100%;\n  resize: none;\n  border: 2px solid rgba(0, 0, 0, 0.1);\n  border-radius: 15px;\n  padding: 15px 20px;\n  font-size: 16px;\n  outline: none;\n  background: rgba(255, 255, 255, 0.8);\n  color: #2c3e50;\n  transition: all 0.3s ease;\n  min-height: 20px;\n  max-height: 120px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.chat-input textarea:focus {\n  border-color: #409eff;\n  box-shadow: 0 0 15px rgba(64, 158, 255, 0.2);\n  background: white;\n  transform: translateY(-2px);\n}\n\n.send-btn {\n  position: absolute;\n  right: 45px;\n  bottom: 45px;\n  padding: 12px 24px;\n  border: none;\n  border-radius: 50px;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\n  transition: all 0.3s ease;\n}\n\n.send-btn:hover:not(:disabled) {\n  transform: translateY(-2px) scale(1.05);\n  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);\n}\n\n.send-btn:disabled {\n  background: #ccc;\n  box-shadow: none;\n  cursor: not-allowed;\n  transform: none;\n}\n\n/* 滚动条样式 */\n.session-list-ul::-webkit-scrollbar {\n  width: 6px;\n}\n\n.session-list-ul::-webkit-scrollbar-track {\n  background: rgba(0, 0, 0, 0.05);\n  border-radius: 3px;\n}\n\n.session-list-ul::-webkit-scrollbar-thumb {\n  background: rgba(102, 126, 234, 0.3);\n  border-radius: 3px;\n}\n\n.session-list-ul::-webkit-scrollbar-thumb:hover {\n  background: rgba(102, 126, 234, 0.5);\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}