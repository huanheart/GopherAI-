{"ast":null,"code":"import { ref, nextTick } from 'vue';\nimport { ElMessage } from 'element-plus';\nimport api from '../utils/api';\nexport default {\n  name: 'AIChat',\n  setup() {\n    const messages = ref([]);\n    const inputMessage = ref('');\n    const loading = ref(false);\n    const messagesRef = ref();\n    const sendMessage = async () => {\n      if (!inputMessage.value.trim()) {\n        ElMessage.warning('请输入消息内容');\n        return;\n      }\n      const userMessage = {\n        role: 'user',\n        content: inputMessage.value\n      };\n      messages.value.push(userMessage);\n      const currentInput = inputMessage.value;\n      inputMessage.value = '';\n      try {\n        loading.value = true;\n        const response = await api.post('/ai/chat', {\n          message: currentInput\n        });\n        if (response.data.status_code === 1000) {\n          const aiMessage = {\n            role: 'ai',\n            content: response.data.response\n          };\n          messages.value.push(aiMessage);\n          await nextTick();\n          scrollToBottom();\n        } else {\n          ElMessage.error(response.data.status_msg || '发送失败');\n        }\n      } catch (error) {\n        console.error('Send message error:', error);\n        ElMessage.error('发送失败，请重试');\n      } finally {\n        loading.value = false;\n      }\n    };\n    const scrollToBottom = () => {\n      if (messagesRef.value) {\n        messagesRef.value.scrollTop = messagesRef.value.scrollHeight;\n      }\n    };\n    return {\n      messages,\n      inputMessage,\n      loading,\n      messagesRef,\n      sendMessage\n    };\n  }\n};","map":{"version":3,"names":["ref","nextTick","ElMessage","api","name","setup","messages","inputMessage","loading","messagesRef","sendMessage","value","trim","warning","userMessage","role","content","push","currentInput","response","post","message","data","status_code","aiMessage","scrollToBottom","error","status_msg","console","scrollTop","scrollHeight"],"sources":["/root/GopherAI/GopherAI-/vue-frontend/src/views/AIChat.vue"],"sourcesContent":["<template>\n  <div class=\"ai-chat-container\">\n    <!-- 左侧会话列表 -->\n    <div class=\"session-list\">\n      <div class=\"session-list-header\">\n        <span>会话列表</span>\n        <button class=\"new-chat-btn\" @click=\"createNewSession\">＋ 新聊天</button>\n      </div>\n      <ul class=\"session-list-ul\">\n        <li\n          v-for=\"session in sessions\"\n          :key=\"session.id\"\n          :class=\"['session-item', { active: currentSessionId === session.id }]\"\n          @click=\"switchSession(session.id)\"\n        >\n          {{ session.name || `会话 ${session.id}` }}\n        </li>\n      </ul>\n    </div>\n\n    <!-- 右侧聊天区域 -->\n    <div class=\"chat-section\">\n      <div class=\"top-bar\">\n        <button class=\"back-btn\" @click=\"$router.push('/menu')\">← 返回</button>\n        <button class=\"sync-btn\" @click=\"syncHistory\" :disabled=\"!currentSessionId || tempSession\">同步历史数据</button>\n        <label for=\"modelType\">选择模型：</label>\n        <select id=\"modelType\" v-model=\"selectedModel\" class=\"model-select\">\n          <option value=\"1\">阿里百炼</option>\n          <option value=\"2\">豆包</option>\n          <option value=\"3\">百炼RAG</option>\n          <option value=\"4\">阿里百炼MCP</option>\n        </select>\n      </div>\n\n      <div class=\"chat-messages\" ref=\"messagesRef\">\n        <div\n          v-for=\"(message, index) in currentMessages\"\n          :key=\"index\"\n          :class=\"['message', message.role === 'user' ? 'user-message' : 'ai-message']\"\n        >\n          <div class=\"message-header\">\n            <b>{{ message.role === 'user' ? '你' : 'AI' }}:</b>\n            <button v-if=\"message.role === 'assistant'\" class=\"tts-btn\" @click=\"playTTS(message.content)\">🔊</button>\n          </div>\n          <div class=\"message-content\" v-html=\"renderMarkdown(message.content)\"></div>\n        </div>\n      </div>\n\n      <div class=\"chat-input\">\n        <textarea\n          v-model=\"inputMessage\"\n          placeholder=\"请输入你的问题...\"\n          @keydown.enter.exact.prevent=\"sendMessage\"\n          :disabled=\"loading\"\n          ref=\"messageInput\"\n          rows=\"1\"\n        ></textarea>\n        <button\n          type=\"button\"\n          :disabled=\"!inputMessage.trim() || loading\"\n          @click=\"sendMessage\"\n          class=\"send-btn\"\n        >\n          {{ loading ? '发送中...' : '发送' }}\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, nextTick } from 'vue'\nimport { ElMessage } from 'element-plus'\nimport api from '../utils/api'\n\nexport default {\n  name: 'AIChat',\n  setup() {\n    const messages = ref([])\n    const inputMessage = ref('')\n    const loading = ref(false)\n    const messagesRef = ref()\n\n    const sendMessage = async () => {\n      if (!inputMessage.value.trim()) {\n        ElMessage.warning('请输入消息内容')\n        return\n      }\n\n      const userMessage = {\n        role: 'user',\n        content: inputMessage.value\n      }\n      messages.value.push(userMessage)\n      const currentInput = inputMessage.value\n      inputMessage.value = ''\n\n      try {\n        loading.value = true\n        const response = await api.post('/ai/chat', { message: currentInput })\n        if (response.data.status_code === 1000) {\n          const aiMessage = {\n            role: 'ai',\n            content: response.data.response\n          }\n          messages.value.push(aiMessage)\n          await nextTick()\n          scrollToBottom()\n        } else {\n          ElMessage.error(response.data.status_msg || '发送失败')\n        }\n      } catch (error) {\n        console.error('Send message error:', error)\n        ElMessage.error('发送失败，请重试')\n      } finally {\n        loading.value = false\n      }\n    }\n\n    const scrollToBottom = () => {\n      if (messagesRef.value) {\n        messagesRef.value.scrollTop = messagesRef.value.scrollHeight\n      }\n    }\n\n    return {\n      messages,\n      inputMessage,\n      loading,\n      messagesRef,\n      sendMessage\n    }\n  }\n}\n</script>\n\n<style scoped>\n.ai-chat-container {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n}\n\n.header {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  color: #2c3e50;\n  display: flex;\n  align-items: center;\n  padding: 0 30px;\n  box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  position: relative;\n  z-index: 2;\n}\n\n.header h2 {\n  margin: 0 0 0 20px;\n  font-size: 24px;\n  font-weight: 600;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n.el-button {\n  transition: all 0.3s ease;\n}\n\n.el-button:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(64, 158, 255, 0.3);\n}\n\n.main {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n}\n\n.chat-messages {\n  flex: 1;\n  overflow-y: auto;\n  padding: 30px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  scroll-behavior: smooth;\n}\n\n.chat-messages::-webkit-scrollbar {\n  width: 6px;\n}\n\n.chat-messages::-webkit-scrollbar-track {\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 3px;\n}\n\n.chat-messages::-webkit-scrollbar-thumb {\n  background: rgba(102, 126, 234, 0.3);\n  border-radius: 3px;\n}\n\n.chat-messages::-webkit-scrollbar-thumb:hover {\n  background: rgba(102, 126, 234, 0.5);\n}\n\n.message {\n  max-width: 70%;\n  padding: 16px 20px;\n  border-radius: 20px;\n  word-wrap: break-word;\n  animation: messageSlideIn 0.4s ease-out;\n  position: relative;\n}\n\n@keyframes messageSlideIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px) scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n  }\n}\n\n.user-message {\n  align-self: flex-end;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  box-shadow: 0 4px 20px rgba(102, 126, 234, 0.3);\n  position: relative;\n}\n\n.user-message::after {\n  content: '';\n  position: absolute;\n  bottom: -2px;\n  right: 20px;\n  width: 0;\n  height: 0;\n  border-left: 8px solid transparent;\n  border-right: 8px solid transparent;\n  border-top: 8px solid #764ba2;\n}\n\n.ai-message {\n  align-self: flex-start;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  color: #2c3e50;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  position: relative;\n}\n\n.ai-message::after {\n  content: '';\n  position: absolute;\n  bottom: -2px;\n  left: 20px;\n  width: 0;\n  height: 0;\n  border-left: 8px solid transparent;\n  border-right: 8px solid transparent;\n  border-top: 8px solid rgba(255, 255, 255, 0.95);\n}\n\n.message-content p {\n  margin: 0;\n  line-height: 1.6;\n  font-size: 15px;\n}\n\n.chat-input {\n  padding: 30px;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n  position: relative;\n}\n\n.el-input {\n  border-radius: 25px;\n  overflow: hidden;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease;\n}\n\n.el-input:hover {\n  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);\n}\n\n.el-input:focus-within {\n  box-shadow: 0 8px 30px rgba(102, 126, 234, 0.2);\n  transform: translateY(-2px);\n}\n\n.el-input__inner {\n  border: none;\n  border-radius: 25px;\n  padding: 0 20px;\n  height: 50px;\n  font-size: 16px;\n}\n\n.el-input__inner:focus {\n  box-shadow: none;\n}\n\n.el-input__suffix {\n  right: 8px;\n}\n\n.el-button {\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  padding: 0;\n  border: none;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  transition: all 0.3s ease;\n}\n\n.el-button:hover {\n  transform: scale(1.1);\n  box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);\n}\n</style>"],"mappings":"AAuEA,SAASA,GAAG,EAAEC,QAAO,QAAS,KAAI;AAClC,SAASC,SAAQ,QAAS,cAAa;AACvC,OAAOC,GAAE,MAAO,cAAa;AAE7B,eAAe;EACbC,IAAI,EAAE,QAAQ;EACdC,KAAKA,CAAA,EAAG;IACN,MAAMC,QAAO,GAAIN,GAAG,CAAC,EAAE;IACvB,MAAMO,YAAW,GAAIP,GAAG,CAAC,EAAE;IAC3B,MAAMQ,OAAM,GAAIR,GAAG,CAAC,KAAK;IACzB,MAAMS,WAAU,GAAIT,GAAG,CAAC;IAExB,MAAMU,WAAU,GAAI,MAAAA,CAAA,KAAY;MAC9B,IAAI,CAACH,YAAY,CAACI,KAAK,CAACC,IAAI,CAAC,CAAC,EAAE;QAC9BV,SAAS,CAACW,OAAO,CAAC,SAAS;QAC3B;MACF;MAEA,MAAMC,WAAU,GAAI;QAClBC,IAAI,EAAE,MAAM;QACZC,OAAO,EAAET,YAAY,CAACI;MACxB;MACAL,QAAQ,CAACK,KAAK,CAACM,IAAI,CAACH,WAAW;MAC/B,MAAMI,YAAW,GAAIX,YAAY,CAACI,KAAI;MACtCJ,YAAY,CAACI,KAAI,GAAI,EAAC;MAEtB,IAAI;QACFH,OAAO,CAACG,KAAI,GAAI,IAAG;QACnB,MAAMQ,QAAO,GAAI,MAAMhB,GAAG,CAACiB,IAAI,CAAC,UAAU,EAAE;UAAEC,OAAO,EAAEH;QAAa,CAAC;QACrE,IAAIC,QAAQ,CAACG,IAAI,CAACC,WAAU,KAAM,IAAI,EAAE;UACtC,MAAMC,SAAQ,GAAI;YAChBT,IAAI,EAAE,IAAI;YACVC,OAAO,EAAEG,QAAQ,CAACG,IAAI,CAACH;UACzB;UACAb,QAAQ,CAACK,KAAK,CAACM,IAAI,CAACO,SAAS;UAC7B,MAAMvB,QAAQ,CAAC;UACfwB,cAAc,CAAC;QACjB,OAAO;UACLvB,SAAS,CAACwB,KAAK,CAACP,QAAQ,CAACG,IAAI,CAACK,UAAS,IAAK,MAAM;QACpD;MACF,EAAE,OAAOD,KAAK,EAAE;QACdE,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEA,KAAK;QAC1CxB,SAAS,CAACwB,KAAK,CAAC,UAAU;MAC5B,UAAU;QACRlB,OAAO,CAACG,KAAI,GAAI,KAAI;MACtB;IACF;IAEA,MAAMc,cAAa,GAAIA,CAAA,KAAM;MAC3B,IAAIhB,WAAW,CAACE,KAAK,EAAE;QACrBF,WAAW,CAACE,KAAK,CAACkB,SAAQ,GAAIpB,WAAW,CAACE,KAAK,CAACmB,YAAW;MAC7D;IACF;IAEA,OAAO;MACLxB,QAAQ;MACRC,YAAY;MACZC,OAAO;MACPC,WAAW;MACXC;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}