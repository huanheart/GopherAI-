{"ast":null,"code":"import { ref, nextTick } from 'vue';\nimport { ElMessage } from 'element-plus';\nimport api from '../utils/api';\nexport default {\n  name: 'AIChat',\n  setup() {\n    const messages = ref([]);\n    const inputMessage = ref('');\n    const loading = ref(false);\n    const messagesRef = ref();\n    const sendMessage = async () => {\n      if (!inputMessage.value.trim()) {\n        ElMessage.warning('请输入消息内容');\n        return;\n      }\n      const userMessage = {\n        role: 'user',\n        content: inputMessage.value\n      };\n      messages.value.push(userMessage);\n      const currentInput = inputMessage.value;\n      inputMessage.value = '';\n      try {\n        loading.value = true;\n        const response = await api.post('/ai/chat', {\n          message: currentInput\n        });\n        if (response.data.code === 200) {\n          const aiMessage = {\n            role: 'ai',\n            content: response.data.data.response\n          };\n          messages.value.push(aiMessage);\n          await nextTick();\n          scrollToBottom();\n        } else {\n          ElMessage.error(response.data.message || '发送失败');\n        }\n      } catch (error) {\n        console.error('Send message error:', error);\n        ElMessage.error('发送失败，请重试');\n      } finally {\n        loading.value = false;\n      }\n    };\n    const scrollToBottom = () => {\n      if (messagesRef.value) {\n        messagesRef.value.scrollTop = messagesRef.value.scrollHeight;\n      }\n    };\n    return {\n      messages,\n      inputMessage,\n      loading,\n      messagesRef,\n      sendMessage\n    };\n  }\n};","map":{"version":3,"names":["ref","nextTick","ElMessage","api","name","setup","messages","inputMessage","loading","messagesRef","sendMessage","value","trim","warning","userMessage","role","content","push","currentInput","response","post","message","data","code","aiMessage","scrollToBottom","error","console","scrollTop","scrollHeight"],"sources":["/root/GopherAI/GopherAI-/vue-frontend/src/views/AIChat.vue"],"sourcesContent":["<template>\n  <div class=\"ai-chat-container\">\n    <el-header class=\"header\">\n      <el-button type=\"primary\" @click=\"$router.push('/menu')\">返回菜单</el-button>\n      <h2>AI聊天</h2>\n    </el-header>\n    <el-main class=\"main\">\n      <div class=\"chat-messages\" ref=\"messagesRef\">\n        <div\n          v-for=\"(message, index) in messages\"\n          :key=\"index\"\n          :class=\"['message', message.role === 'user' ? 'user-message' : 'ai-message']\"\n        >\n          <div class=\"message-content\">\n            <p>{{ message.content }}</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"chat-input\">\n        <el-input\n          v-model=\"inputMessage\"\n          placeholder=\"输入您的问题...\"\n          @keyup.enter=\"sendMessage\"\n          :disabled=\"loading\"\n        >\n          <template #suffix>\n            <el-button\n              type=\"primary\"\n              :loading=\"loading\"\n              @click=\"sendMessage\"\n              icon=\"Send\"\n            >\n              发送\n            </el-button>\n          </template>\n        </el-input>\n      </div>\n    </el-main>\n  </div>\n</template>\n\n<script>\nimport { ref, nextTick } from 'vue'\nimport { ElMessage } from 'element-plus'\nimport api from '../utils/api'\n\nexport default {\n  name: 'AIChat',\n  setup() {\n    const messages = ref([])\n    const inputMessage = ref('')\n    const loading = ref(false)\n    const messagesRef = ref()\n\n    const sendMessage = async () => {\n      if (!inputMessage.value.trim()) {\n        ElMessage.warning('请输入消息内容')\n        return\n      }\n\n      const userMessage = {\n        role: 'user',\n        content: inputMessage.value\n      }\n      messages.value.push(userMessage)\n      const currentInput = inputMessage.value\n      inputMessage.value = ''\n\n      try {\n        loading.value = true\n        const response = await api.post('/ai/chat', { message: currentInput })\n        if (response.data.code === 200) {\n          const aiMessage = {\n            role: 'ai',\n            content: response.data.data.response\n          }\n          messages.value.push(aiMessage)\n          await nextTick()\n          scrollToBottom()\n        } else {\n          ElMessage.error(response.data.message || '发送失败')\n        }\n      } catch (error) {\n        console.error('Send message error:', error)\n        ElMessage.error('发送失败，请重试')\n      } finally {\n        loading.value = false\n      }\n    }\n\n    const scrollToBottom = () => {\n      if (messagesRef.value) {\n        messagesRef.value.scrollTop = messagesRef.value.scrollHeight\n      }\n    }\n\n    return {\n      messages,\n      inputMessage,\n      loading,\n      messagesRef,\n      sendMessage\n    }\n  }\n}\n</script>\n\n<style scoped>\n.ai-chat-container {\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.header {\n  background-color: #409eff;\n  color: white;\n  display: flex;\n  align-items: center;\n  padding: 0 20px;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n}\n\n.header h2 {\n  margin: 0 0 0 20px;\n  font-size: 20px;\n}\n\n.main {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  background: #f5f7fa;\n}\n\n.chat-messages {\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.message {\n  max-width: 70%;\n  padding: 12px 16px;\n  border-radius: 18px;\n  word-wrap: break-word;\n}\n\n.user-message {\n  align-self: flex-end;\n  background-color: #409eff;\n  color: white;\n}\n\n.ai-message {\n  align-self: flex-start;\n  background-color: white;\n  color: #303133;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.message-content p {\n  margin: 0;\n  line-height: 1.5;\n}\n\n.chat-input {\n  padding: 20px;\n  background: white;\n  border-top: 1px solid #e4e7ed;\n}\n</style>"],"mappings":"AA0CA,SAASA,GAAG,EAAEC,QAAO,QAAS,KAAI;AAClC,SAASC,SAAQ,QAAS,cAAa;AACvC,OAAOC,GAAE,MAAO,cAAa;AAE7B,eAAe;EACbC,IAAI,EAAE,QAAQ;EACdC,KAAKA,CAAA,EAAG;IACN,MAAMC,QAAO,GAAIN,GAAG,CAAC,EAAE;IACvB,MAAMO,YAAW,GAAIP,GAAG,CAAC,EAAE;IAC3B,MAAMQ,OAAM,GAAIR,GAAG,CAAC,KAAK;IACzB,MAAMS,WAAU,GAAIT,GAAG,CAAC;IAExB,MAAMU,WAAU,GAAI,MAAAA,CAAA,KAAY;MAC9B,IAAI,CAACH,YAAY,CAACI,KAAK,CAACC,IAAI,CAAC,CAAC,EAAE;QAC9BV,SAAS,CAACW,OAAO,CAAC,SAAS;QAC3B;MACF;MAEA,MAAMC,WAAU,GAAI;QAClBC,IAAI,EAAE,MAAM;QACZC,OAAO,EAAET,YAAY,CAACI;MACxB;MACAL,QAAQ,CAACK,KAAK,CAACM,IAAI,CAACH,WAAW;MAC/B,MAAMI,YAAW,GAAIX,YAAY,CAACI,KAAI;MACtCJ,YAAY,CAACI,KAAI,GAAI,EAAC;MAEtB,IAAI;QACFH,OAAO,CAACG,KAAI,GAAI,IAAG;QACnB,MAAMQ,QAAO,GAAI,MAAMhB,GAAG,CAACiB,IAAI,CAAC,UAAU,EAAE;UAAEC,OAAO,EAAEH;QAAa,CAAC;QACrE,IAAIC,QAAQ,CAACG,IAAI,CAACC,IAAG,KAAM,GAAG,EAAE;UAC9B,MAAMC,SAAQ,GAAI;YAChBT,IAAI,EAAE,IAAI;YACVC,OAAO,EAAEG,QAAQ,CAACG,IAAI,CAACA,IAAI,CAACH;UAC9B;UACAb,QAAQ,CAACK,KAAK,CAACM,IAAI,CAACO,SAAS;UAC7B,MAAMvB,QAAQ,CAAC;UACfwB,cAAc,CAAC;QACjB,OAAO;UACLvB,SAAS,CAACwB,KAAK,CAACP,QAAQ,CAACG,IAAI,CAACD,OAAM,IAAK,MAAM;QACjD;MACF,EAAE,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK;QAC1CxB,SAAS,CAACwB,KAAK,CAAC,UAAU;MAC5B,UAAU;QACRlB,OAAO,CAACG,KAAI,GAAI,KAAI;MACtB;IACF;IAEA,MAAMc,cAAa,GAAIA,CAAA,KAAM;MAC3B,IAAIhB,WAAW,CAACE,KAAK,EAAE;QACrBF,WAAW,CAACE,KAAK,CAACiB,SAAQ,GAAInB,WAAW,CAACE,KAAK,CAACkB,YAAW;MAC7D;IACF;IAEA,OAAO;MACLvB,QAAQ;MACRC,YAAY;MACZC,OAAO;MACPC,WAAW;MACXC;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}